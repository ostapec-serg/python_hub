import user_data_funcimport sqlite3def remainder():    with sqlite3.connect('bankom.db') as db:        cursor = db.cursor()        bank_dict = cursor.execute("SELECT banknote, amount FROM banknote").fetchall()        out_dict = {}        for keyval in bank_dict:            out_dict[keyval[0]] = keyval[1]        return [out_dict]    # в некоторых функциях преобразовать в список [out_dict]def atm_cash():    all_cash = []    change_banknote = {}    bank = remainder()    banknote = bank    for row in banknote:        change_banknote.update(row)    for line in change_banknote.items():        result = int(line[0]) * int(line[1])        all_cash.append(result)    return sum(all_cash)def note_amount():    up_atm = {}    print(('Порядок ввода.\n'           'В первой строке - Введите номинал банкноты - '           'вводиться номинал 1й купюры.\n В '           'строке - Введите количество банкнот - '           'вводиться количество купюр\n'           'введенных в строке - Введите номинал банкноты -\n'           '\n'           'Список банкнот в наявности в банкомате:\n'))    print(balance_banknotes())    while True:        try:            print("Для подтверждения 0\n")            banknote = abs(int(input("Введите номинал банкноты(целое число):\n"                                     "Для выхода введите 0\n")))            if (banknote == 10 or banknote == 20 or banknote == 50 or                    banknote == 100 or banknote == 200 or banknote == 500 or                    banknote == 1000 or banknote == 0):                if banknote != 0:                    amount = abs(int(input("Введите количество банкнот:(целое число)\n")))                    up_atm[banknote] = amount                else:                    return up_atm            else:                print("Не верный номинал банкнот!\n"                      "Допустимые номиналы:\n"                      "10, 20, 50, 100, 200, 500, 1000")        except Exception:            print("Не верное количество банкнот!")def balance_banknotes():    all_cash = []    change_banknote = {}    banknote = remainder()    for row in banknote:        change_banknote.update(row)    for line in change_banknote.items():        result = int(line[0]) * int(line[1])        all_cash.append(result)        print(f"Номинал {line[0]} = {line[1]} купюр")    return f"Купюр ка сумму {atm_cash()} USD\n"def withdraw_banknote(income, old):    old_cash = {}    new_balance = []    new_cash = old    for key in new_cash:        old_cash.update(key)    if user_data_func.with_dict(income) is not False:        income_value = income.copy()        for key in income_value.keys():            if key in old_cash.keys():                val = old_cash[key]                if key in income.keys():                    new = val - income[key]                    dictu = {key: new}                    if key in income:                        old_cash.pop(key)                        new_balance.append(dictu)        for k in new_balance:            old_cash.update(k)        return banknote_write(old_cash)    return "Не возможно выполнить операцию"def new_banknote(income, old):    old_cash = {}    new_balance = []    new_cash = old    for key in new_cash:        old_cash.update(key)    income_value = income.copy()    for key in income_value.keys():        if key in old_cash.keys():            val = old_cash[key]            if key in income.keys():                new = income[key] + val                dictu = {key: new}                if key in income:                    old_cash.pop(key)                new_balance.append(dictu)    for k in new_balance:        old_cash.update(k)    return banknote_write(old_cash)def banknote_write(new):    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3        write_dict = []        for k, v in new.items():            write_dict.append({k: v})        for d in write_dict:            for key, val in d.items():                cursor = db.cursor()                cursor.execute("UPDATE banknote SET amount == ? "                               "WHERE banknote == ?", (val, key,)).fetchone()        db.commit()    return "Операция успешна"