import sqlite3import ATMfrom time import sleepfrom itertools import combinations_with_replacementdef tables():    try:        with sqlite3.connect('bankom.db') as db:            cursor = db.cursor()            cursor.execute("""CREATE TABLE IF NOT EXISTS users_data(id INTEGER, user TEXT,                             password INTEGER, admin	TEXT, PRIMARY KEY("id" AUTOINCREMENT)) """)            cursor.execute('''CREATE TABLE balance (id INTEGER, user TEXT, balance INTEGER, PRIMARY KEY("id" AUTOINCREMENT))''')            cursor.execute(''' CREATE TABLE banknote ("id" INTEGER, "banknote" INTEGER,                            "amount" INTEGER, PRIMARY KEY("id" AUTOINCREMENT)) ''')            cursor.execute('''CREATE TABLE operation (id INTEGER, user TEXT,                                         operation TEXT, status TEXT, PRIMARY KEY("id" AUTOINCREMENT))''')        return    except sqlite3.OperationalError:        returndef user_check():        with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3            cursor = db.cursor()            cursor.execute("""SELECT user FROM users_data""")            if cursor.fetchone() is None:                cursor.close()                return add_user()        return "Есть зарегистрированые пользователи"def withdraw_cash(name):    my_balance = user_balance(name)    depo = abs(int(input("Введите сумму для снятия:\n")))    if depo < my_balance and (my_balance + depo) > 0:        if ATM.atm_cash() > depo:            take = {}            some_val = withdraw(depo)            if some_val is not False:                for line in some_val:                    take[line] = some_val.count(line)                if with_dict(take) is True:                    for i in some_val:                        print(i, end=",")                    print()                    ATM.withdraw_banknote(take, ATM.remainder())                    new_balance = my_balance - depo                    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3                        cursor = db.cursor()                        cursor.execute("UPDATE balance SET balance == ? WHERE user == ?",                                       (new_balance, name,)).fetchone()                        cursor.execute("""INSERT INTO operation (user, operation, status)                                                 VALUES(?, ?, ?)""", (name, 'withdraw', 'success'))                    return depo, new_balance                else:                    print(f"Банкомат не может выдать выбраную сумму\n"                          f"Выберете с доступных номиналов\n{ATM.balance_banknotes()}")                    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3                        cursor = db.cursor()                        cursor.execute("""INSERT INTO operation (user, operation, status)                                         VALUES(?, ?, ?)""", (name, 'withdraw', 'success'))                        db.commit()            else:                print(f"Банкомат не может выдать выбраную сумму\n"                      f"Выберете с доступных номиналов\n{ATM.balance_banknotes()}")                with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3                    cursor = db.cursor()                    cursor.execute("""INSERT INTO operation (user, operation, status)                                 VALUES(?, ?, ?)""", (name, 'withdraw', 'denied'))        else:            print(f"Банкомат не может выдать выбраную сумму\n"                  f"Недостаточно денег в банкомате!")            with sqlite3.connect('bankom.db') as db:                cursor = db.cursor()                cursor.execute("""INSERT INTO operation (user, operation, status)                                 VALUES(?, ?, ?)""", (name, 'withdraw', 'denied'))    else:        print(f"Недостаточно денег на счету!\n"              f"На Вашем счету {user_balance(name)}")        with sqlite3.connect('bankom.db') as db:            cursor = db.cursor()            cursor.execute("""INSERT INTO operation (user, operation, status)                             VALUES(?, ?, ?)""", (name, 'withdraw', 'denied'))        return Falsedef deposite(name):    my_balance = user_balance(name)    depo = abs(int(input("Введите сумму вложения:\n")))    new_balance = my_balance + depo    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3        cursor = db.cursor()        cursor.execute("UPDATE balance SET balance == ? WHERE user == ?",                       (new_balance, name,)).fetchone()    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3        cursor = db.cursor()        cursor.execute("""INSERT INTO operation (user, operation, status)                         VALUES(?, ?, ?)""", (name, 'deposite', 'success'))    return depo, new_balancedef with_dict(another):    with sqlite3.connect('bankom.db') as db:        cursor = db.cursor()        bank_dict = cursor.execute("SELECT banknote, amount FROM banknote").fetchall()        out_dict = {}        for keyval in bank_dict:            out_dict[keyval[0]] = keyval[1]  # [dict]        banknotes = {}        for k, v in out_dict.items():            banknotes[int(k)] = v        #bool_val = False        for key in another:            if another[key] <= banknotes[key]:                pass            else:                return False        return Truedef user_balance(name):    with sqlite3.connect('bankom.db') as db:  # db, db3, sqlite, sqlite3        cursor = db.cursor()        valid = cursor.execute("SELECT balance FROM balance WHERE user == ?", (name,)).fetchone()        for row in valid:            balance = row        sleep(0.2)        return int(balance)def withdraw(depo):    with sqlite3.connect('bankom.db') as db:        cursor = db.cursor()        bank_dict = cursor.execute("SELECT banknote, amount FROM banknote").fetchall()        out_dict = {}        for keyval in bank_dict:            out_dict[keyval[0]] = keyval[1]   #templates dict        a = []        banknotes = {}        for k, v in bank_dict:            banknotes[int(k)] = v        bank_note = banknotes.copy()        for k, v in banknotes.items():            if v == 0:                bank_note.pop(k)        for j in bank_note.keys():            a.append(j)        a.sort(reverse=True)        m = [depo // v for v in a]        for combine in range(1, sum(m) + 1):            for c in combinations_with_replacement(a, combine):                if sum(c) == depo:                    #k = 0                    return c        return Falsedef add_user():    try:        print("\nСоздаем новую учетную запись!\n")        name = input("Введите имя нового пользователя:\n")        password = input("Введите пароль нового пользователя:\n")        admin = input("Доступ к меню администратора (True or False):\n")        with sqlite3.connect('bankom.db') as db:            cursor = db.cursor()            valid = cursor.execute("SELECT user FROM users_data").fetchall()            if (name,) not in valid:                cursor.execute("""INSERT INTO users_data (user, password, admin)                 VALUES( ?, ?, ?)""", (name, password, admin))                db.commit()            balance = int(input("Сумма баланса нового пользователя\n"))            cursor.execute("""INSERT INTO balance(user, balance) VALUES(?, ?)""", (name, balance))            return ("\nОперация успешная\n"                    "Пользователь добавлен!\n")    except ValueError:        print("\nНе правильный ввод!!!\n")        return "\nНе верная операция!\n"