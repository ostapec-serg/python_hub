from time import sleepimport ATMimport user_data_funcimport sqlite3def geekbank():    def validator():        user_data_func.tables()        print(user_data_func.user_check())        i = 3        while i != 0:            print("\nАВТОРИЗАЦИЯ\n")            name = input("Введите имя пользователя:\n")            pin = input("Введите пин-код:\n")            with sqlite3.connect('bankom.db') as db:                cursor = db.cursor()                valid = cursor.execute("SELECT user, password, admin FROM users_data").fetchall()                if (name, pin, 'False') in valid:                    sleep(0.3)                    user_menu(name)                elif (name, pin, 'True') in valid:                    sleep(0.3)                    admin_menu(name)                    break                else:                    i -= 1                    print("Не правильные имя пяльзователя или пароль!\n"                          f"Осталось {i} попыток\n")                    sleep(0.5)            cursor.close()        exit_bank()    def user_menu(name):        while True:            try:                print("Выберете оперецию:\n"                      "Для просмотра баланса, нажмите - 1\n"                      "Для снятия денег, нажмите - 2\n"                      "Для пополнение счета, нажмите - 3\n"                      "Для выхода, нажмите - 0\n")                operation_num = int(input("Введите номер операции:\n"))                if 0 <= operation_num <= 3:                    if operation_num == 1:                        sleep(0.3)                        print(f"{name} у Вас на счету "                              f"{user_data_func.user_balance(name)} USD!\n")                    elif operation_num == 2:                        sleep(0.3)                        raw = user_data_func.withdraw_cash(name)                        if not raw:                            pass                        else:                            print(f"{name} Вы сняли со счета {raw[0]}, на "                                  f"счету {user_data_func.user_balance(name)} USD!\n")                    elif operation_num == 3:                        sleep(0.3)                        raw = user_data_func.deposite(name)                        print(f"{name} Вы положили на счет {raw[0]}, на "                              f"счету {user_data_func.user_balance(name)} USD!\n")                    elif operation_num == 0:                        print(exit_bank())                        break                else:                    sleep(0.3)                    print("Не верная операция!\n")            except Exception:                print("Invalid Value")    def admin_menu(name):        while True:            try:                print("Выберете оперецию:\n"                      "Для просмотра количества купюр, нажмите - 1\n"                      "Изменить количество купюр - 2\n"                      "Переход в меню пользователя - 3\n"                      "Меню восстановления - 4 \n"                      "Закончить работу с банкоматом, нажмите - 0\n"                      "\n"                      "ПРИ ПЕРЕХОДЕ В МЕНЮ ПОЛЬЗОВАТЕЛЯ ВЫ ВЫХОДИТЕ С УЧЕТНОЙ ЗАПИСИ АДМИНИСТРАТОРА!\n"                      "ДЛЯ ПЕРЕХОДА В МЕНЮ АДМИНИСТРАТОРА НУЖНА ПОВТОРНАЯ АВТОРИЗАЦИЯ!")                operation_num = int(input("Введите номер операции:\n"))                if 0 <= operation_num <= 4:                    if operation_num == 1:                        sleep(0.3)                        print(ATM.balance_banknotes())                    elif operation_num == 2:                        print("Выберете оперецию:\n"                              "Добавить купюр, нажмите - 1\n"                              "Изьять купюры, нажмите - 2\n")                        operation = int(input("Введите номер операции:\n"))                        if operation == 1:                            sleep(0.3)                            print(update_atm(operation))                        elif operation == 2:                            sleep(0.3)                            print(update_atm(operation))                        else:                            sleep(0.3)                            print("Не верная операция!\n")                    elif operation_num == 3:                        sleep(0.3)                        user_menu(name)                        break                    elif operation_num == 4:                        print("Выберете оперецию:\n"                              "Добавить пользователей - 1\n"                              "Просмотр пользователей - 2\n"                              "Востановить список банкнот - 3\n")                        operation = int(input("Введите номер операции:\n"))                        if 0 <= operation <= 4:                            if operation == 1:                                sleep(0.3)                                print(user_data_func.add_user())                            elif operation == 2:                                sleep(0.3)                                user_view()                            elif operation == 3:                                sleep(0.3)                                print(restore())                            else:                                sleep(0.3)                                print("Не верная операция!\n")                    elif operation_num == 0:                        sleep(0.3)                        print(exit_bank())                        break                    else:                        sleep(0.3)                        print("Не верная операция!\n")                        pass            except ValueError:                print("Не правильный ввод!!!\n")    def update_atm(oper):        income = ATM.note_amount()        old_cash = ATM.remainder()        if oper == 2:            new_balance = ATM.withdraw_banknote(income, old_cash)        else:            new_balance = ATM.new_banknote(income, old_cash)        return new_balance    def user_view():        with sqlite3.connect('bankom.db') as db:            cursor = db.cursor()            valid = cursor.execute("SELECT user, password FROM users_data").fetchall()            for _ in valid:                if ('admin', 'admin') in valid:                    valid.remove(('admin', 'admin'))            for i in valid:                print(i[1])            cursor.close()            print()            return    def restore():        print("После востановленнии списка банкнот, для полноценной работы,\n"              "!!!!НУЖНО ПОПОЛНТЬ БАНКОМАТ!!!!")        sleep(4)        with sqlite3.connect('bankom.db') as db:            cursor = db.cursor()            banknote_list = [1000, 500, 200, 100, 50, 20, 10]            for i in banknote_list:                cursor.execute("""INSERT INTO banknote (banknote, amount) VALUES(?, ?)""", (i, 0))            cursor.close()        return "\nОперация успешная\n"    def exit_bank():        return (f"*** Спасибо за использование GeegHub-Bank ***\n"                "*** Хорошего дня и не забывайте улыбаться! ***")    validator()print("*** Добро пожаловать в GeekHub-Bank ***")sleep(0.5)geekbank()