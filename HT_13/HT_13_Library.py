class Library(object):    """    class Library used to enable readers to select a book,    read it and return to the library.    It also keeps track of the number of visitors and their data.    Attributes    __visitors: integer        It keeps track of the number of visitors at        the current time.    __allBooks: dict        Stores the names of books and authors in the form of        key-value pairs. Private attribute.        Used only inside the class    Methods    visitor_info()        Viewing visitor information    view_visitors()        View the number of visitors    view_books()        View available books    choose_book(choose_book)        Choosing a book to read or store    return_book(book_to_return)        return book to the library    reading(book_to_read)        Reading one of the previously selected books    exit()        exit from library    """    print("Welcome to the library")    __visitors = 0    __allBooks = {"Властелин колец": "Джон Р. М. Толкин",                  "Гордость и предубеждение": "Джейн Остин",                  "Тёмные начала": "Филип Пулман",                  "Автостопом по галактике": "Дуглас Адамс",                  "Гарри Поттер и Кубок огня": "Джоан Роулинг",                  "Убить пересмешника": "Харпер Ли",                  "Винни Пух": "Алан Александр Милн",                  "1984": "Джордж Оруэлл",                  "Джейн Эйр": "Шарлотта Бронте",                  "Грозовой перевал": "Эмили Бронте",                  "Пение птиц": "Себастьян Фолкс",                  "Ребекка": "Дафна Дюморье",                  "Над пропастью во ржи": "Джером Сэлинджер",                  "Война и мир": "Лев Толстой",                  "Унесённые ветром": "Маргарет Митчелл",                  "Гарри Поттер и философский камень": "Джоан Роулинг",                  "Гарри Поттер и Тайная комната": "Джоан Роулинг",                  "Гарри Поттер и узник Азкабана": "Джоан Роулинг",                  "Хоббит, или Туда и обратно": "Джон Р. Р. Толкин",                  "Скотный двор": "Джордж Оруэлл"}    __visitors_id = []    _amount_books = 0    my_books = {}    def __init__(self, name, visitor_num):        """        constructor        :param name: str            visitor name        :param visitor_num: int            visitor id. 4 <= len(visitor id) <= 10:        _amount_books: int            visitor books amount        my_book: dict            all visitor books        """        if (visitor_num not in Library.__visitors_id) and \                (4 <= len(str(visitor_num)) <= 10):            Library.__visitors_id.append(visitor_num)            Library.__visitors += 1            self.name = name            self._visitor_num = visitor_num            self._amount_books = Library._amount_books            self.my_books = Library.my_books            print(f"Hello, {self.name}!")        else:            raise AttributeError("invalid visitor id")    def visitor_info(self):        """        Allows you to see information about library visitor        :return: visitor name, _visitor_num, _amount_books,        visitor my_books in form key-value pairs. type(dict)        """        return self.__dict__    @staticmethod    def view_visitors():        """        Allows you to see the number of library visitors at        the current time.        :return: the number of visitors. type(int)        """        return Library.__visitors    @staticmethod    def view_books():        """        Allows you to see all available books at        the current time.        :return: available books in form                 key-value pairs. type(dict)        """        return Library.__allBooks    def choose_book(self, choose_book):        """        Choosing a book to read or store into your book list        from __books        :param choose_book: book name. type(str)        :return: book name and author name in form of            key-value pairs. type(dict)        """        if choose_book in Library.__allBooks:            for book, author in Library.__allBooks.items():                if choose_book == book:                    self.my_books[book] = author                    self._amount_books += 1                    Library.__allBooks.pop(choose_book)                    return {book: author}        raise AttributeError("invalid book name")    def return_book(self, book_to_return):        """        Choosing a book from your book list to return it to the library        :param book_to_return: book name        :return: book name and author name that you want to return        in form of key-value pairs, type(dict) or None if  book to        return not in my_books        """        if book_to_return in self.my_books:            copy_my_book = self.my_books.copy()            for book, author in copy_my_book.items():                if book_to_return == book:                    Library.__allBooks[book] = author                    self.my_books.pop(book_to_return)                    self._amount_books -= 1                    return {book: author}        else:            return    def reading(self, book_to_read):        """        Reading selected books from your book list.        :param book_to_read: selected books to read        :return: book name and author name that visitor want to read,            in form of key-value pairs. type(dict)        """        if self._amount_books != 0:            if book_to_read in self.my_books:                for book, author in self.my_books.items():                    if book_to_read == book:                        return {book: author}            raise AttributeError("invalid book name")        raise AttributeError("no books in my_books added")    def __del__(self):        """        destructor        Delete object (Exit from the library). On exit, all books that        are in the visitor's book list are removed from this list and        added to the public books list. Attribute _amount_books is        cleared. As a visitor, object is not listed.        :return: None        """        try:            Library.__visitors -= 1            if self._amount_books != 0:                copy_my_book = self.my_books.copy()                for book, author in copy_my_book.items():                    Library.__allBooks[book] = author                    self.my_books.popitem()                    self._amount_books -= 1                    return        except AttributeError:            pass